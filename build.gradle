import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id "java"
    id "idea"

    id "maven-publish"
    id "io.github.goooler.shadow" version "8.1.7"
    id "io.papermc.paperweight.userdev" version "1.7.7"

    id "xyz.jpenilla.run-paper" version "2.3.1"
}

group = "dev.matito.minecraft"
version = "1.0.0"

def commit = getCommit()
def release = System.getenv("RELEASE") == "true"

static def getCommit() {
    try {
        var commit = "git rev-parse --verify --short HEAD".execute().text.trim()
        return commit.isEmpty() ? "unknown" : commit
    } catch(IOException ignored) {
        return "unknown"
    }
}

repositories {
    mavenCentral()
    maven { url = "https://jitpack.io" }

    maven { url = "https://repo.papermc.io/repository/maven-public/" }
    maven { url = "https://oss.sonatype.org/content/groups/public/" }

    maven { url = "https://maven.mineking.dev/releases" }
    maven { url = "https://maven.slimecloud.de/releases" }
    maven { url = "https://maven.slimecloud.de/snapshots" }
}

dependencies {
    paperweight.paperDevBundle("1.21.1-R0.1-SNAPSHOT")

    compileOnly "dev.jorel:commandapi-bukkit-core:9.5.1"

    compileOnly "dev.triumphteam:triumph-gui:3.1.10"
    compileOnly "de.mineking:DatabaseUtils:1.4.0"
    compileOnly "de.mineking:JavaUtils:1.9.0"

    compileOnly "dev.jorel:commandapi-annotations:9.5.1"
    annotationProcessor "dev.jorel:commandapi-annotations:9.5.1"

    compileOnly "org.jetbrains:annotations:24.1.0"
    compileOnly "org.projectlombok:lombok:1.18.32"
    annotationProcessor "org.projectlombok:lombok:1.18.32"
}

def targetJavaVersion = 21
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)

    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion

    withSourcesJar()
    withJavadocJar()
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
    options.compilerArgs << "-parameters"

    options.release.set(targetJavaVersion)
}

tasks.register("prepareSources", Copy) {
    delete("$buildDir/preparedSources")

    from("src/main/java") {
        include("**/BuildInfo.java")

        filter(ReplaceTokens, "tokens":
                Map.of(
                        "VERSION", project.version + "-" + commit
                )
        )
    }

    into("$buildDir/preparedSources")

    includeEmptyDirs = false
}

compileJava {
    FileTree javaSources = sourceSets.main.allJava.filter {
        it.name != "BuildInfo.java"
    }.asFileTree

    source = javaSources + fileTree("$buildDir/preparedSources")

    dependsOn "prepareSources"
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset "UTF-8"
    filesMatching("paper-plugin.yml") {
        expand props
    }
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

shadowJar {
    archiveFileName = "${project.name}.jar"
}

runServer {
    downloadPlugins {
        url("https://cdn.modrinth.com/data/kTmEpjUi/versions/FFLh4suE/MTimer-130.jar")
        hangar("CommandAPI", "9.7.0")
    }

    dependsOn shadowJar
    version "1.21.4"
}